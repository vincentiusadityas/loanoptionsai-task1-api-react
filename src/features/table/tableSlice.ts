import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchTableData } from './tableAPI';

export interface TableState {
  data: RowData[],
  status: 'idle' | 'loading' | 'failed';
  firstLoad: boolean,
}

export interface RowData {
  domains: [];
  country: '';
  "state-province": null | '';
  web_pages: [];
  name: '';
  alpha_two_code: '';
}

const initialState: TableState = {
    data: [],
    status: 'idle',
    firstLoad: true,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadDataAsync = createAsyncThunk(
  'table/fetchData',
  async () => {
    const response = await fetchTableData();
    console.log("RESPONSE:", response)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const tableSlice = createSlice({
  name: 'table',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state: any) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.data.push(state.data[0])
      state.firstLoad=false
    },
    remove: (state: any) => {
      state.data.pop()
      state.firstLoad=false
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder: any) => {
    builder
      .addCase(loadDataAsync.pending, (state: any, action: any) => {
        console.log('action:', action)
        state.status = 'loading';
      })
      .addCase(loadDataAsync.fulfilled, (state: any, action: any) => {
        state.firstLoad = true;
        state.status = 'idle';
        state.data = action.payload
      })
      .addCase(loadDataAsync.rejected, (state: any) => {
        state.status = 'failed';
      });
  },
});

export const { add, remove } = tableSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTableData = (state: RootState) => state.table;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch: any, getState: any) => {
//     const currentValue = selectTableData(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default tableSlice.reducer;
